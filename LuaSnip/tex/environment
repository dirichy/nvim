local ls = require("luasnip")
local s = ls.snippet
local sn = ls.snippet_node
local isn = ls.indent_snippet_node
local t = ls.text_node
local i = ls.insert_node
local f = ls.function_node
local c = ls.choice_node
local d = ls.dynamic_node
local r = ls.restore_node
local events = require("luasnip.util.events")
local ai = require("luasnip.nodes.absolute_indexer")
local extras = require("luasnip.extras")
local line_begin = require("luasnip.extras.expand_conditions").line_begin
local l = extras.lambda
local rep = extras.rep
local p = extras.partial
local m = extras.match
local n = extras.nonempty
local dl = extras.dynamic_lambda
local fmt = require("luasnip.extras.fmt").fmt
local fmta = require("luasnip.extras.fmt").fmta
local conds = require("luasnip.extras.expand_conditions")
local postfix = require("luasnip.extras.postfix").postfix
local types = require("luasnip.util.types")
local parse = require("luasnip.util.parser").parse_snippet
local ms = ls.multi_snippet
local autosnippet = ls.extend_decorator.apply(s, { snippetType = "autosnippet" })

-- [
-- personal imports
-- ]
local tex = require("util.conditions")
local auto_backslash_snippet = require("util.scaffolding").auto_backslash_snippet
local symbol_snippet = require("util.scaffolding").symbol_snippet
local single_command_snippet = require("util.scaffolding").single_command_snippet
local postfix_snippet = require("util.scaffolding").postfix_snippet
local env_leader = "b"
local envs = {
  pf = "proof",
  so = "solution",
  ex = "exercise",
  cr = "center",
  pr = "proof",
  le = "lemma",
  en = "enumerate",
  it = "itemize",
}
M = {
  s(
    { trig = "beg" },
    fmta(
      [[
      \begin{<>}<>
        <>
      \end{<>}
      ]],
      {
        i(1),
        i(0),
        rep(1),
      }
    ),
    { condition = line_begin }
  ),
}
local env_snippets = {}
for k, v in pairs(envs) do
  table.insert(
    env_snippets,
    s(
      { trig = env_leader .. k, snippetType = "autosnippet" },
      fmta(
        [[
    \begin{<>}
      <>
    \end{<>}
    <>
    ]],
        {
          f(function(_, snip)
            return envs[k]
          end),
          i(1),
          f(function(_, snip)
            return envs[k]
          end),
          i(0),
        }
      ),
      { condition = line_begin }
    )
  )
end
vim.list_extend(M, env_snippets)
return M
